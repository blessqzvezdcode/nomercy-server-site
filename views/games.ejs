<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>–ú–∏–Ω–∏-–ò–≥—Ä—ã - NoMercy Marketplace</title>
  <link rel="stylesheet" href="/css/base.css">
<link rel="stylesheet" href="/css/games.css">
</head>
<body>
    <nav>
        <a href="/" class="brand">NoMercy</a>
        <div class="nav-buttons">
            <% if (user) { %>
                <a href="/messenger" class="nav-messenger-btn" title="–ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä">üí¨</a>
                <div class="dropdown">
                    <button class="dropdown-toggle">
                        <span>üë§ <%= user.name %> (üí∞ <%= balance %>)</span>
                    </button>
                    <div class="dropdown-menu">
                        <a href="/" class="dropdown-item">üè† –ì–ª–∞–≤–Ω–∞—è</a>
                        <a href="/profile/<%= user.id %>" class="dropdown-item">üë§ –ü—Ä–æ—Ñ–∏–ª—å</a>
                        <a href="/market" class="dropdown-item">üõí –ú–∞—Ä–∫–µ—Ç</a>
                        <a href="/cards" class="dropdown-item">üÉè –ö–∞—Ä—Ç—ã</a>
                        <a href="/quests" class="dropdown-item">‚öîÔ∏è –ö–≤–µ—Å—Ç—ã</a>
                        <a href="/games" class="dropdown-item active">üéÆ –ò–≥—Ä—ã</a>
                        <a href="/news" class="dropdown-item">üì∞ –ù–æ–≤–æ—Å—Ç–∏</a>
                        <a href="/faq" class="dropdown-item">‚ùì FAQ</a>
                        <a href="/achievements" class="dropdown-item">üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</a>
                        <a href="/support" class="dropdown-item">üéß –ü–æ–¥–¥–µ—Ä–∂–∫–∞</a>
                        <div class="dropdown-divider"></div>
                        <% if (user.role === 'admin') { %>
                            <a href="/admin" class="dropdown-item">‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞</a>
                            <div class="dropdown-divider"></div>
                        <% } %>
                        <button class="dropdown-item theme-toggle" id="theme-toggle">üåô –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞</button>
                        <div class="dropdown-divider"></div>
                        <a href="/logout" class="dropdown-item">üö™ –í—ã–π—Ç–∏</a>
                    </div>
                </div>
            <% } else { %>
                <a href="/auth/discord" class="btn">–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Discord</a>
            <% } %>
        </div>
    </nav>

<div class="container">
  <div class="games-header">
    <h1>üé∞ –ú–∏–Ω–∏-–ò–≥—Ä—ã</h1>
    <p class="games-subtitle">–ò–≥—Ä–∞–π—Ç–µ –≤ –∫–∞–∑–∏–Ω–æ –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ NMCoin!</p>
    <div class="balance-display">
      <span class="balance-label">–í–∞—à –±–∞–ª–∞–Ω—Å:</span>
      <span class="balance-amount neon-num"><%= balance %> NMCoin</span>
    </div>
  </div>

  <!-- Game Selection -->
  <div class="games-grid">
    <!-- Number Game -->
    <div class="game-card" onclick="openGame('number')">
      <div class="game-icon">üéØ</div>
      <div class="game-info">
        <h3>–ë–æ–ª—å—à–µ –∏–ª–∏ –ú–µ–Ω—å—à–µ</h3>
        <p>–£–≥–∞–¥–∞–π—Ç–µ, –±—É–¥–µ—Ç –ª–∏ —Å–ª–µ–¥—É—é—â–µ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –∏–ª–∏ –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ</p>
        <div class="game-stats">
          <span class="stat">–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: 2x</span>
          <span class="stat">–ú–∏–Ω–∏–º—É–º: 10 NMCoin</span>
        </div>
      </div>
    </div>

    <!-- Crash Game -->
    <div class="game-card" onclick="openGame('crash')">
      <div class="game-icon">üöÄ</div>
      <div class="game-info">
        <h3>–ö—Ä–∞—à</h3>
        <p>–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä–∞–∫–µ—Ç–æ–π –∏ –∑–∞–±–∏—Ä–∞–π—Ç–µ –≤—ã–∏–≥—Ä—ã—à –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –æ–Ω–∞ —É–ø–∞–¥–µ—Ç</p>
        <div class="game-stats">
          <span class="stat">–ú–∞–∫—Å–∏–º—É–º: 100x</span>
          <span class="stat">–ú–∏–Ω–∏–º—É–º: 10 NMCoin</span>
        </div>
      </div>
    </div>

    <!-- Slots Game -->
    <div class="game-card" onclick="openGame('slots')">
      <div class="game-icon">üé∞</div>
      <div class="game-info">
        <h3>–°–ª–æ—Ç—ã</h3>
        <p>–ö—Ä—É—Ç–∏—Ç–µ –±–∞—Ä–∞–±–∞–Ω—ã –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ –ø—Ä–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤</p>
        <div class="game-stats">
          <span class="stat">–ú–∞–∫—Å–∏–º—É–º: 50x</span>
          <span class="stat">–ú–∏–Ω–∏–º—É–º: 5 NMCoin</span>
        </div>
      </div>
    </div>
  </div>

  <!-- Game Modal -->
  <div id="gameModal" class="game-modal">
    <div class="game-modal-content">
      <div class="game-modal-header">
        <h2 id="gameTitle">–ò–≥—Ä–∞</h2>
        <button class="close-btn" onclick="closeGame()">&times;</button>
      </div>
      
      <div class="game-modal-body">
        <!-- Number Game -->
        <div id="numberGame" class="game-content" style="display: none;">
          <div class="game-display">
            <div class="current-number" id="currentNumber">?</div>
            <div class="game-instructions">–£–≥–∞–¥–∞–π—Ç–µ, –±—É–¥–µ—Ç –ª–∏ —Å–ª–µ–¥—É—é—â–µ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –∏–ª–∏ –º–µ–Ω—å—à–µ</div>
          </div>
          
          <div class="bet-controls">
            <div class="bet-input">
              <label>–°—Ç–∞–≤–∫–∞ (NMCoin)</label>
              <input type="number" id="numberBet" min="10" max="1000" value="10">
            </div>
            <div class="bet-actions">
              <button class="btn game-btn" onclick="makeNumberGuess('higher')">–ë–æ–ª—å—à–µ</button>
              <button class="btn game-btn" onclick="makeNumberGuess('lower')">–ú–µ–Ω—å—à–µ</button>
            </div>
          </div>
        </div>

        <!-- Crash Game -->
        <div id="crashGame" class="game-content" style="display: none;">
          <div class="crash-display">
            <div class="crash-multiplier" id="crashMultiplier">1.00x</div>
            <div class="crash-graph" id="crashGraph"></div>
          </div>
          
          <div class="bet-controls">
            <div class="bet-input">
              <label>–°—Ç–∞–≤–∫–∞ (NMCoin)</label>
              <input type="number" id="crashBet" min="10" max="1000" value="10">
            </div>
            <div class="bet-actions">
              <button class="btn game-btn" id="crashStartBtn" onclick="startCrash()">–ó–∞–ø—É—Å—Ç–∏—Ç—å</button>
              <button class="btn game-btn" id="crashCashBtn" onclick="cashOut()" style="display: none;">–ó–∞–±—Ä–∞—Ç—å</button>
            </div>
          </div>
        </div>

        <!-- Slots Game -->
        <div id="slotsGame" class="game-content" style="display: none;">
          <div class="slots-display">
            <div class="slots-reels">
              <div class="reel" id="reel1">üçí</div>
              <div class="reel" id="reel2">üçí</div>
              <div class="reel" id="reel3">üçí</div>
            </div>
          </div>
          
          <div class="bet-controls">
            <div class="bet-input">
              <label>–°—Ç–∞–≤–∫–∞ (NMCoin)</label>
              <input type="number" id="slotsBet" min="5" max="500" value="5">
            </div>
            <div class="bet-actions">
              <button class="btn game-btn" onclick="spinSlots()">–ö—Ä—É—Ç–∏—Ç—å</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Game History -->
  <div class="game-history">
    <h3>üìä –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä</h3>
    <div class="history-list" id="gameHistory">
      <div class="empty-state">
        <span class="empty-icon">üéÆ</span>
        <p>–ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä–∞—Ç—å, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é</p>
      </div>
    </div>
  </div>
</div>

<script>
let currentGame = null;
let gameHistory = JSON.parse(localStorage.getItem('gameHistory') || '[]');

function openGame(gameType) {
  currentGame = gameType;
  document.getElementById('gameModal').style.display = 'flex';
  
  // Hide all games
  document.querySelectorAll('.game-content').forEach(game => game.style.display = 'none');
  
  // Show selected game
  if (gameType === 'number') {
    document.getElementById('numberGame').style.display = 'block';
    document.getElementById('gameTitle').textContent = '–ë–æ–ª—å—à–µ –∏–ª–∏ –ú–µ–Ω—å—à–µ';
    generateNewNumber();
  } else if (gameType === 'crash') {
    document.getElementById('crashGame').style.display = 'block';
    document.getElementById('gameTitle').textContent = '–ö—Ä–∞—à';
  } else if (gameType === 'slots') {
    document.getElementById('slotsGame').style.display = 'block';
    document.getElementById('gameTitle').textContent = '–°–ª–æ—Ç—ã';
  }
}

function closeGame() {
  document.getElementById('gameModal').style.display = 'none';
  currentGame = null;
}

// Number Game Logic
let currentNumber = 0;
let nextNumber = 0;

function generateNewNumber() {
  currentNumber = Math.floor(Math.random() * 100) + 1;
  nextNumber = Math.floor(Math.random() * 100) + 1;
  document.getElementById('currentNumber').textContent = currentNumber;
}

function makeNumberGuess(guess) {
  const bet = parseInt(document.getElementById('numberBet').value);
  if (bet < 10) {
    alert('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 10 NMCoin');
    return;
  }
  
  // –°–Ω–∞—á–∞–ª–∞ —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
  updateBalance(-bet);
  
  const isCorrect = (guess === 'higher' && nextNumber > currentNumber) || 
                   (guess === 'lower' && nextNumber < currentNumber);
  
  if (isCorrect) {
    const winAmount = bet * 2;
    addToHistory('–ë–æ–ª—å—à–µ –∏–ª–∏ –ú–µ–Ω—å—à–µ', bet, winAmount, true);
    alert(`–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í—ã–∏–≥—Ä—ã—à: ${winAmount} NMCoin`);
    // –ù–∞—á–∏—Å–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à (—Å—Ç–∞–≤–∫–∞ —É–∂–µ —Å–ø–∏—Å–∞–Ω–∞)
    updateBalance(winAmount);
  } else {
    addToHistory('–ë–æ–ª—å—à–µ –∏–ª–∏ –ú–µ–Ω—å—à–µ', bet, 0, false);
    alert(`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –°–ª–µ–¥—É—é—â–µ–µ —á–∏—Å–ª–æ –±—ã–ª–æ: ${nextNumber}`);
    // –°—Ç–∞–≤–∫–∞ —É–∂–µ —Å–ø–∏—Å–∞–Ω–∞ –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
  }
  
  generateNewNumber();
}

// Crash Game Logic
let crashInterval = null;
let crashMultiplier = 1.0;
let isCrashRunning = false;

function startCrash() {
  if (isCrashRunning) return;
  
  const bet = parseInt(document.getElementById('crashBet').value);
  if (bet < 10) {
    alert('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 10 NMCoin');
    return;
  }
  
  // –°–Ω–∞—á–∞–ª–∞ —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
  updateBalance(-bet);
  
  isCrashRunning = true;
  crashMultiplier = 1.0;
  document.getElementById('crashStartBtn').style.display = 'none';
  document.getElementById('crashCashBtn').style.display = 'inline-block';
  
  crashInterval = setInterval(() => {
    crashMultiplier += 0.01;
    document.getElementById('crashMultiplier').textContent = crashMultiplier.toFixed(2) + 'x';
    
    // Random crash point
    if (Math.random() < 0.01) {
      crash();
    }
  }, 100);
}

function cashOut() {
  if (!isCrashRunning) return;
  
  const bet = parseInt(document.getElementById('crashBet').value);
  const winAmount = Math.floor(bet * crashMultiplier);
  
  addToHistory('–ö—Ä–∞—à', bet, winAmount, true);
  alert(`–ó–∞–±—Ä–∞–ª–∏! –í—ã–∏–≥—Ä—ã—à: ${winAmount} NMCoin`);
  // –ù–∞—á–∏—Å–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à (—Å—Ç–∞–≤–∫–∞ —É–∂–µ —Å–ø–∏—Å–∞–Ω–∞)
  updateBalance(winAmount);
  
  stopCrash();
}

function crash() {
  if (!isCrashRunning) return;
  
  const bet = parseInt(document.getElementById('crashBet').value);
  addToHistory('–ö—Ä–∞—à', bet, 0, false);
  alert(`–ö—Ä–∞—à –Ω–∞ ${crashMultiplier.toFixed(2)}x! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.`);
  // –°—Ç–∞–≤–∫–∞ —É–∂–µ —Å–ø–∏—Å–∞–Ω–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  
  stopCrash();
}

function stopCrash() {
  isCrashRunning = false;
  clearInterval(crashInterval);
  document.getElementById('crashStartBtn').style.display = 'inline-block';
  document.getElementById('crashCashBtn').style.display = 'none';
  document.getElementById('crashMultiplier').textContent = '1.00x';
}

// Slots Game Logic
const slotSymbols = ['üçí', 'üçã', 'üçä', 'üçá', '‚≠ê', 'üíé'];
let isSpinning = false;

function spinSlots() {
  if (isSpinning) return;
  
  const bet = parseInt(document.getElementById('slotsBet').value);
  if (bet < 5) {
    alert('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 5 NMCoin');
    return;
  }
  
  // –°–Ω–∞—á–∞–ª–∞ —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
  updateBalance(-bet);
  
  isSpinning = true;
  const reels = document.querySelectorAll('.reel');
  
  // Spin animation
  let spins = 0;
  const spinInterval = setInterval(() => {
    reels.forEach(reel => {
      reel.textContent = slotSymbols[Math.floor(Math.random() * slotSymbols.length)];
    });
    spins++;
    
    if (spins > 20) {
      clearInterval(spinInterval);
      checkSlotsResult(bet);
      isSpinning = false;
    }
  }, 100);
}

function checkSlotsResult(bet) {
  const reels = document.querySelectorAll('.reel');
  const symbols = Array.from(reels).map(reel => reel.textContent);
  
  let winAmount = 0;
  let isWin = false;
  
  // Check for three of a kind
  if (symbols[0] === symbols[1] && symbols[1] === symbols[2]) {
    const multiplier = getSymbolMultiplier(symbols[0]);
    winAmount = bet * multiplier;
    isWin = true;
  }
  
  addToHistory('–°–ª–æ—Ç—ã', bet, winAmount, isWin);
  
  if (isWin) {
    alert(`–í—ã–∏–≥—Ä—ã—à! ${winAmount} NMCoin`);
    // –ù–∞—á–∏—Å–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à (—Å—Ç–∞–≤–∫–∞ —É–∂–µ —Å–ø–∏—Å–∞–Ω–∞)
    updateBalance(winAmount);
  } else {
    alert('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!');
    // –°—Ç–∞–≤–∫–∞ —É–∂–µ —Å–ø–∏—Å–∞–Ω–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  }
}

function getSymbolMultiplier(symbol) {
  const multipliers = {
    'üçí': 2,
    'üçã': 3,
    'üçä': 4,
    'üçá': 5,
    '‚≠ê': 10,
    'üíé': 50
  };
  return multipliers[symbol] || 1;
}

// History Management
function addToHistory(game, bet, win, isWin) {
  const gameRecord = {
    game: game,
    bet: bet,
    win: win,
    isWin: isWin,
    timestamp: new Date().toISOString()
  };
  
  gameHistory.unshift(gameRecord);
  if (gameHistory.length > 50) {
    gameHistory = gameHistory.slice(0, 50);
  }
  
  localStorage.setItem('gameHistory', JSON.stringify(gameHistory));
  updateHistoryDisplay();
}

function updateHistoryDisplay() {
  const historyContainer = document.getElementById('gameHistory');
  
  if (gameHistory.length === 0) {
    historyContainer.innerHTML = `
      <div class="empty-state">
        <span class="empty-icon">üéÆ</span>
        <p>–ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä–∞—Ç—å, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é</p>
      </div>
    `;
    return;
  }
  
  historyContainer.innerHTML = gameHistory.map(record => `
    <div class="history-item ${record.isWin ? 'win' : 'loss'}">
      <div class="history-game">${record.game}</div>
      <div class="history-details">
        <span>–°—Ç–∞–≤–∫–∞: ${record.bet} NMCoin</span>
        <span>${record.isWin ? '–í—ã–∏–≥—Ä—ã—à' : '–ü—Ä–æ–∏–≥—Ä—ã—à'}: ${record.win} NMCoin</span>
      </div>
      <div class="history-time">${new Date(record.timestamp).toLocaleString('ru-RU')}</div>
    </div>
  `).join('');
}

// Balance update function
function updateBalance(amount) {
  const balanceElement = document.querySelector('.balance-amount');
  const currentBalance = parseInt(balanceElement.textContent);
  const newBalance = currentBalance + amount;
  balanceElement.textContent = newBalance;
  
  // Update balance on server
  fetch('/games/update-balance', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ amount: amount })
  }).then(response => response.json())
    .then(data => {
      if (data.success) {
        balanceElement.textContent = data.newBalance;
      }
    })
    .catch(error => {
      console.error('Error updating balance:', error);
    });
}

// Initialize
document.addEventListener('DOMContentLoaded', function() {
  updateHistoryDisplay();
});
</script>
<script src="/js/dropdown.js"></script>
<script src="/js/theme-switcher.js"></script>
</body>
</html>
