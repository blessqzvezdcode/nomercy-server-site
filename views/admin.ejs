<!DOCTYPE html>
<html lang="ru">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>–ê–¥–º–∏–Ω–∫–∞ - NoMercy</title>
<link rel="stylesheet" href="/css/base.css">
<link rel="stylesheet" href="/css/admin.css">
</head>
<body>
    <nav>
  <a href="/" class="brand">NoMercy</a>
        <div class="nav-buttons">
            <% if (user) { %>
                <a href="/messenger" class="nav-messenger-btn" title="–ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä">üí¨</a>
                <div class="dropdown">
        <button class="dropdown-toggle">
          <span>–ú–µ–Ω—é</span>
        </button>
        <div class="dropdown-menu">
          <a href="/profile/<%= user.id %>" class="dropdown-item">üë§ –ü—Ä–æ—Ñ–∏–ª—å</a>
          <a href="/market" class="dropdown-item">üõí –ú–∞—Ä–∫–µ—Ç</a>
          <a href="/cards" class="dropdown-item">üÉè –ö–æ–ª–ª–µ–∫—Ü–∏—è</a>
          <a href="/news" class="dropdown-item">üì∞ –ù–æ–≤–æ—Å—Ç–∏</a>
          <a href="/quests" class="dropdown-item">üìã –ö–≤–µ—Å—Ç—ã</a>
          <a href="/games" class="dropdown-item">üé∞ –ú–∏–Ω–∏-–ò–≥—Ä—ã</a>
          <a href="/achievements" class="dropdown-item">üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</a>
          <a href="/faq" class="dropdown-item">‚ùì FAQ</a>
          <div class="dropdown-divider"></div>
          <button class="dropdown-item theme-toggle" id="theme-toggle">üåô –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞</button>
          <div class="dropdown-divider"></div>
          <a href="/logout" class="dropdown-item">üö™ –í—ã–π—Ç–∏</a>
        </div>
      </div>
    <% } else { %>
      <a href="/auth/discord" class="btn">–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Discord</a>
    <% } %>
  </div>
</nav>

<div class="container">
  <h2>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h2>
  
  <!-- Success/Error Messages -->
  <% if (typeof message !== 'undefined' && message) { %>
    <div class="admin-message success">
      <span class="message-icon">‚úÖ</span>
      <span><%= message %></span>
    </div>
  <% } %>
  
  <!-- Admin Navigation Tabs -->
  <div class="admin-tabs">
    <button class="tab-btn active" onclick="showTab('overview')">–û–±–∑–æ—Ä</button>
    <button class="tab-btn" onclick="showTab('transactions')">–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</button>
    <button class="tab-btn" onclick="showTab('pending')">–û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</button>
    <button class="tab-btn" onclick="showTab('listings')">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ—Ç–∞–º–∏</button>
    <button class="tab-btn" onclick="showTab('items')">–¢–æ–≤–∞—Ä—ã</button>
    <button class="tab-btn" onclick="showTab('cards')">–ö–∞—Ä—Ç–æ—á–∫–∏</button>
    <button class="tab-btn" onclick="showTab('collections')">–ö–æ–ª–ª–µ–∫—Ü–∏–∏</button>
    <button class="tab-btn" onclick="showTab('users')">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</button>
    <button class="tab-btn" onclick="showTab('support')">–ü–æ–¥–¥–µ—Ä–∂–∫–∞</button>
  </div>

  <!-- Overview Tab -->
  <div id="overview-tab" class="tab-content active">
    <h3>–û–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã</h3>
    
    <!-- Admin Coin Management -->
    <div class="card">
      <div class="card-header">
        <h3>üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç–∞–º–∏</h3>
      </div>
      <div class="card-content">
        <form id="give-coins-form" class="admin-form">
          <div class="form-group">
            <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ NMCoin –¥–ª—è –≤—ã–¥–∞—á–∏</label>
            <input type="number" id="coin-amount" name="amount" min="1" max="10000" required class="form-input">
          </div>
          <div class="form-group">
            <label>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Å–µ–±—è)</label>
            <input type="text" id="user-id" name="userId" placeholder="613717721867354122" class="form-input">
          </div>
          <button type="submit" class="btn">
            <span class="btn-icon">üí∞</span>
            –í—ã–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã
          </button>
        </form>
        
        <div class="admin-actions" style="margin-top: 16px;">
          <a href="/admin/reset-coins" class="btn danger" onclick="return confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å –≤—Å–µ –º–æ–Ω–µ—Ç—ã?')">
            <span class="btn-icon">‚ö†Ô∏è</span>
            –û–±–Ω—É–ª–∏—Ç—å –≤—Å–µ –º–æ–Ω–µ—Ç—ã
          </a>
          <a href="/admin/clear-listings" class="btn danger" onclick="return confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ª–æ—Ç—ã?')" style="margin-left: 8px;">
            <span class="btn-icon">üóëÔ∏è</span>
            –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ª–æ—Ç—ã
          </a>
        </div>
      </div>
    </div>
    
    <div class="grid">
    <div class="card">
      <h3>–¢–æ–≤–∞—Ä—ã</h3>
      <form action="/admin/add" method="POST" class="card">
        <input name="name" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ" required>
        <input name="price" placeholder="–¶–µ–Ω–∞" required>
        <button class="btn" type="submit">–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä</button>
      </form>
      <div style="margin-top:12px;">
        <% items.forEach((item, index) => { %>
          <div class="shop-item card">
            <h4><%= item.name %></h4>
            <p class="small">–¶–µ–Ω–∞: <%= item.price %></p>
            <form action="/admin/delete" method="POST" style="display:inline">
              <input type="hidden" name="index" value="<%= index %>">
              <button class="btn ghost" type="submit">–£–¥–∞–ª–∏—Ç—å</button>
            </form>
          </div>
        <% }) %>
      </div>
    </div>

    <div class="card">
      <h3>–ö–∞—Ä—Ç–æ—á–∫–∏</h3>
      <form action="/admin/cards/add" method="POST" class="card">
        <input name="id" placeholder="ID –∫–∞—Ä—Ç–æ—á–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä c10)" required>
        <input name="name" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏" required>
        <select name="rarity">
          <option value="common">common</option>
          <option value="rare">rare</option>
          <option value="legendary">legendary</option>
        </select>
        <select name="collection" required>
          <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é</option>
          <option value="launch_2025">–ó–∞–ø—É—Å–∫ 2025</option>
          <option value="special_edition">–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∏–∑–¥–∞–Ω–∏–µ</option>
          <option value="limited_series">–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è —Å–µ—Ä–∏—è</option>
        </select>
        <input name="image" placeholder="URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)">
        <button class="btn" type="submit">–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É</button>
      </form>
      <div style="margin-top:12px;">
        <% cards.forEach(c => { %>
          <div class="card-item card">
            <h4><%= c.name %> <span class="small">(<%= c.rarity %>)</span></h4>
            <form action="/admin/cards/delete" method="POST">
              <input type="hidden" name="id" value="<%= c.id %>">
              <button class="btn ghost" type="submit">–£–¥–∞–ª–∏—Ç—å</button>
            </form>
          </div>
        <% }) %>
      </div>
    </div>

    <div class="card">
      <h3>–ü–∞–∫–∏</h3>
      <form action="/admin/packs/add" method="POST" class="card">
        <input name="id" placeholder="ID –ø–∞–∫–∞ (p1)" required>
        <input name="name" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–∫–∞" required>
        <input name="price" placeholder="–¶–µ–Ω–∞ –ø–∞–∫–∞" required>
        <input name="count" placeholder="–ö–æ–ª-–≤–æ –∫–∞—Ä—Ç –≤ –ø–∞–∫–∞—Ö" required>
        <button class="btn" type="submit">–°–æ–∑–¥–∞—Ç—å –ø–∞–∫</button>
      </form>
      <div style="margin-top:12px;">
        <% packs.forEach(p => { %>
          <div class="card card-item">
            <h4><%= p.name %> <span class="small">–¶–µ–Ω–∞: <%= p.price %> / –ö–æ–ª-–≤–æ: <%= p.count %></span></h4>
            <form action="/admin/packs/delete" method="POST" style="display:inline">
              <input type="hidden" name="id" value="<%= p.id %>">
              <button class="btn ghost" type="submit">–£–¥–∞–ª–∏—Ç—å –ø–∞–∫</button>
            </form>
            <form action="/admin/packs/addcard" method="POST" style="margin-top:8px;">
              <input type="hidden" name="packId" value="<%= p.id %>">
              <select name="cardId">
                <% cards.forEach(c=>{ %>
                  <option value="<%= c.id %>"><%= c.name %> (<%= c.rarity %>)</option>
                <% }) %>
              </select>
              <input name="weight" placeholder="–í–µ—Å (–Ω–∞–ø—Ä. 10)" required>
              <button class="btn" type="submit">–î–æ–±–∞–≤–∏—Ç—å –≤ –ø–∞–∫</button>
            </form>
            <div class="small" style="margin-top:8px;">–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:
              <% p.contents.forEach(ct => { %>
                <% const cd = cards.find(x=>x.id==ct.cardId) || {name:ct.cardId}; %>
                <div class="small card-item" style="display:inline-block;margin:6px;padding:6px;"><%= cd.name %> (w:<%= ct.weight %>)</div>
              <% }) %>
            </div>
          </div>
        <% }) %>
      </div>
    </div>
  </div>

  <!-- Transactions Tab -->
  <div id="transactions-tab" class="tab-content">
    <h3>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏</h3>
    <div class="transactions-list">
      <% if (transactions && transactions.length) { %>
        <% transactions.forEach(function(transaction){ %>
          <div class="transaction-card">
            <div class="transaction-header">
              <div class="transaction-id">ID: <%= transaction.id %></div>
              <div class="transaction-status status-<%= transaction.status %>">
                <%= transaction.status === 'pending_guarantor' ? '‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏' : 
                    transaction.status === 'approved' ? '‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞' : 
                    transaction.status === 'rejected' ? '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞' : transaction.status %>
              </div>
            </div>
            
            <div class="transaction-details">
              <div class="transaction-info">
                <div class="info-item">
                  <span class="label">–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</span>
                  <span class="value"><%= transaction.buyerId %></span>
                </div>
                <div class="info-item">
                  <span class="label">–ü—Ä–æ–¥–∞–≤–µ—Ü:</span>
                  <span class="value"><%= transaction.sellerId %></span>
                </div>
                <div class="info-item">
                  <span class="label">–°—É–º–º–∞:</span>
                  <span class="value neon-num"><%= transaction.amount %> NMCoin</span>
                </div>
                <div class="info-item">
                  <span class="label">–°–æ–∑–¥–∞–Ω–∞:</span>
                  <span class="value"><%= new Date(transaction.createdAt).toLocaleString('ru-RU') %></span>
                </div>
              </div>
              
              <% if (transaction.status === 'pending_guarantor') { %>
                <div class="transaction-actions">
                  <form method="POST" action="/admin/transaction/<%= transaction.id %>/approve" style="display: inline;">
                    <button type="submit" class="btn success">
                      <span class="btn-icon">‚úÖ</span>
                      –û–¥–æ–±—Ä–∏—Ç—å
                    </button>
                  </form>
                  <form method="POST" action="/admin/transaction/<%= transaction.id %>/reject" style="display: inline;">
                    <button type="submit" class="btn danger">
                      <span class="btn-icon">‚ùå</span>
                      –û—Ç–∫–ª–æ–Ω–∏—Ç—å
                    </button>
                  </form>
                </div>
              <% } else if (transaction.guarantorId) { %>
                <div class="transaction-guarantor">
                  <span class="label">–ì–∞—Ä–∞–Ω—Ç:</span>
                  <span class="value"><%= transaction.guarantorId %></span>
                </div>
              <% } %>
            </div>
          </div>
        <% }) %>
      <% } else { %>
        <div class="empty-state">
          <span class="empty-icon">üí≥</span>
          <h3>–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</h3>
          <p>–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏</p>
        </div>
      <% } %>
    </div>
  </div>

  <a href="/" class="btn ghost" style="margin-top:14px;">–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç</a>
  </div>

  <!-- Cards Tab -->
  <div id="cards-tab" class="tab-content">
    <h3>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏</h3>
    
    <div class="card">
      <div class="card-header">
        <h3>‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É</h3>
      </div>
      <div class="card-content">
        <form action="/admin/cards/add" method="POST" class="admin-form">
          <div class="form-group">
            <label>ID –∫–∞—Ä—Ç–æ—á–∫–∏</label>
            <input name="id" placeholder="c1" required>
          </div>
          <div class="form-group">
            <label>–ù–∞–∑–≤–∞–Ω–∏–µ</label>
            <input name="name" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏" required>
          </div>
          <div class="form-group">
            <label>–†–µ–¥–∫–æ—Å—Ç—å</label>
            <select name="rarity" required>
              <option value="common">common</option>
              <option value="uncommon">uncommon</option>
              <option value="rare">rare</option>
              <option value="epic">epic</option>
              <option value="legendary">legendary</option>
            </select>
          </div>
          <div class="form-group">
            <label>URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
            <input name="image" placeholder="https://example.com/image.png">
          </div>
          <button class="btn" type="submit">–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É</button>
        </form>
      </div>
    </div>

    <div class="card">
      <div class="card-header">
        <h3>üìã –°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫</h3>
      </div>
      <div class="card-content">
        <% if (cards && cards.length) { %>
          <div class="cards-grid">
            <% cards.forEach(c => { %>
              <div class="card-item">
                <div class="card-preview">
                  <% if (c.image) { %>
                    <img src="<%= c.image %>" alt="<%= c.name %>" class="card-image">
                  <% } else { %>
                    <div class="card-placeholder">üÉè</div>
                  <% } %>
                </div>
                <div class="card-info">
                  <h4><%= c.name %></h4>
                  <span class="card-rarity rarity-<%= c.rarity %>"><%= c.rarity %></span>
                  <span class="card-id">ID: <%= c.id %></span>
                </div>
                <form action="/admin/cards/delete" method="POST" class="card-actions">
                  <input type="hidden" name="id" value="<%= c.id %>">
                  <button class="btn danger" type="submit">–£–¥–∞–ª–∏—Ç—å</button>
                </form>
              </div>
            <% }) %>
          </div>
        <% } else { %>
          <div class="empty-state">
            <span class="empty-icon">üÉè</span>
            <p>–ù–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫</p>
          </div>
        <% } %>
      </div>
    </div>
  </div>

  <!-- Pending Transactions Tab -->
  <div id="pending-tab" class="tab-content">
    <h3>–°–¥–µ–ª–∫–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</h3>
    
    <div class="card">
      <div class="card-header">
        <h3>‚è≥ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</h3>
      </div>
      <div class="card-content">
        <div id="pending-transactions">
          <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...</div>
        </div>
      </div>
    </div>
  </div>

  <!-- Listings Management Tab -->
  <div id="listings-tab" class="tab-content">
    <h3>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ—Ç–∞–º–∏</h3>
    
    <div class="card">
      <div class="card-header">
        <h3>üìã –í—Å–µ –ª–æ—Ç—ã</h3>
      </div>
      <div class="card-content">
        <div id="all-listings">
          <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ—Ç–æ–≤...</div>
        </div>
      </div>
    </div>
  </div>

  <!-- Collections Tab -->
  <div id="collections-tab" class="tab-content">
    <h3>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏</h3>
    
    <div class="card">
      <div class="card-header">
        <h3>‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é</h3>
      </div>
      <div class="card-content">
        <form action="/admin/collections/add" method="POST" class="admin-form">
          <div class="form-group">
            <label>ID –∫–æ–ª–ª–µ–∫—Ü–∏–∏</label>
            <input name="id" placeholder="collection_1" required>
          </div>
          <div class="form-group">
            <label>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏</label>
            <input name="name" placeholder="–ó–∞–ø—É—Å–∫ 2025" required>
          </div>
          <div class="form-group">
            <label>–û–ø–∏—Å–∞–Ω–∏–µ</label>
            <textarea name="description" placeholder="–ü–µ—Ä–≤–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –∫–∞—Ä—Ç" required></textarea>
          </div>
          <div class="form-group">
            <label>–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ (NMCoin)</label>
            <input name="reward" type="number" placeholder="1000" required>
          </div>
          <button class="btn" type="submit">–°–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é</button>
        </form>
      </div>
    </div>

    <div class="card">
      <div class="card-header">
        <h3>üèÜ –°–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π</h3>
      </div>
      <div class="card-content">
        <div id="collections-list">
          <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π...</div>
        </div>
      </div>
    </div>
  </div>

  <!-- Users Tab -->
  <div id="users-tab" class="tab-content">
    <h3>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</h3>
    
    <!-- User Role Management -->
    <div class="card">
      <div class="card-header">
        <h3>üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏</h3>
      </div>
      <div class="card-content">
        <form id="change-role-form" class="admin-form">
          <div class="form-group">
            <label>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</label>
            <input type="text" id="role-user-id" name="userId" placeholder="613717721867354122" required class="form-input">
          </div>
          <div class="form-group">
            <label>–ù–æ–≤–∞—è —Ä–æ–ª—å</label>
            <select id="user-role" name="role" required class="form-input">
              <option value="user">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</option>
              <option value="moderator">–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä</option>
              <option value="admin">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</option>
            </select>
          </div>
          <button type="submit" class="btn">
            <span class="btn-icon">üëë</span>
            –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å
          </button>
        </form>
      </div>
    </div>
    
    <!-- Users List -->
    <div class="card">
      <div class="card-header">
        <h3>üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h3>
        <button onclick="loadUsers()" class="btn btn-secondary">–û–±–Ω–æ–≤–∏—Ç—å</button>
      </div>
      <div class="card-content">
        <div id="users-list" class="users-list">
          <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...</div>
        </div>
      </div>
    </div>
  </div>

  <!-- Support Tab -->
  <div id="support-tab" class="tab-content">
    <h3>–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</h3>
    
    <div class="card">
      <div class="card-header">
        <h3>üéß –û–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h3>
        <button onclick="loadSupportTickets()" class="btn btn-secondary">üîÑ –û–±–Ω–æ–≤–∏—Ç—å</button>
      </div>
      <div class="card-content">
        <div id="support-tickets-list">
          <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π...</div>
        </div>
      </div>
    </div>

    <!-- Support Response Modal -->
    <div id="support-modal" class="modal" style="display: none;">
      <div class="modal-content">
        <div class="modal-header">
          <h3>–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ</h3>
          <button onclick="closeSupportModal()" class="close-btn">&times;</button>
        </div>
        <div class="modal-body">
          <div id="ticket-details"></div>
          <form id="support-response-form">
            <div class="form-group">
              <label>–û—Ç–≤–µ—Ç:</label>
              <textarea id="support-response" rows="4" required class="form-input"></textarea>
            </div>
            <div class="form-group">
              <label>–°—Ç–∞—Ç—É—Å:</label>
              <select id="support-status" class="form-input">
                <option value="in_progress">–í —Ä–∞–±–æ—Ç–µ</option>
                <option value="closed">–ó–∞–∫—Ä—ã—Ç–æ</option>
              </select>
            </div>
            <button type="submit" class="btn btn-primary">üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç</button>
          </form>
        </div>
      </div>
    </div>
  </div>

  <script>
function showTab(tabName) {
  // Hide all tabs
  const tabs = document.querySelectorAll('.tab-content');
  tabs.forEach(tab => tab.classList.remove('active'));
  
  // Remove active class from all buttons
  const buttons = document.querySelectorAll('.tab-btn');
  buttons.forEach(btn => btn.classList.remove('active'));
  
  // Show selected tab
  document.getElementById(tabName + '-tab').classList.add('active');
  
  // Add active class to clicked button
  event.target.classList.add('active');
  
  // Load data for specific tabs
  if (tabName === 'pending') {
    loadPendingTransactions();
  } else if (tabName === 'collections') {
    loadCollections();
  } else if (tabName === 'listings') {
    loadAllListings();
  } else if (tabName === 'users') {
    loadUsers();
  }
}

// Load pending transactions
async function loadPendingTransactions() {
  try {
    const response = await fetch('/api/admin/pending-transactions');
    const data = await response.json();
    
    const container = document.getElementById('pending-transactions');
    
    if (data.success && data.transactions.length > 0) {
      container.innerHTML = '';
      data.transactions.forEach(transaction => {
        const transactionElement = document.createElement('div');
        transactionElement.className = 'transaction-item';
        transactionElement.innerHTML = `
          <div class="transaction-info">
            <h4>${transaction.title}</h4>
            <p>–ü—Ä–æ–¥–∞–≤–µ—Ü: ${transaction.ownerName}</p>
            <p>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${transaction.buyerName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>
            <p>–¶–µ–Ω–∞: ${transaction.price} NMCoin</p>
            <p>–°—Ç–∞—Ç—É—Å: ${transaction.status}</p>
            <p>–°–æ–∑–¥–∞–Ω–æ: ${new Date(transaction.createdAt).toLocaleString()}</p>
          </div>
          <div class="transaction-actions">
            <button class="btn success" onclick="approveTransaction('${transaction.id}')">
              ‚úÖ –û–¥–æ–±—Ä–∏—Ç—å
            </button>
            <button class="btn danger" onclick="rejectTransaction('${transaction.id}')">
              ‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å
            </button>
          </div>
        `;
        container.appendChild(transactionElement);
      });
    } else {
      container.innerHTML = '<div class="empty-state"><span class="empty-icon">‚úÖ</span><p>–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</p></div>';
    }
  } catch (error) {
    console.error('Error loading pending transactions:', error);
    document.getElementById('pending-transactions').innerHTML = 
      '<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</div>';
  }
}

// Approve transaction
async function approveTransaction(transactionId) {
  if (!confirm('–û–¥–æ–±—Ä–∏—Ç—å —ç—Ç—É —Å–¥–µ–ª–∫—É?')) {
    return;
  }
  
  try {
    const response = await fetch(`/api/admin/approve-transaction/${transactionId}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    const data = await response.json();
    
    if (data.success) {
      alert('–°–¥–µ–ª–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!');
      loadPendingTransactions();
    } else {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏: ' + (data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    }
  } catch (error) {
    console.error('Error approving transaction:', error);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏: ' + error.message);
  }
}

// Reject transaction
async function rejectTransaction(transactionId) {
  const reason = prompt('–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:');
  if (!reason) {
    return;
  }
  
  try {
    const response = await fetch(`/api/admin/reject-transaction/${transactionId}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ reason: reason })
    });
    
    const data = await response.json();
    
    if (data.success) {
      alert('–°–¥–µ–ª–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!');
      loadPendingTransactions();
    } else {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: ' + (data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    }
  } catch (error) {
    console.error('Error rejecting transaction:', error);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: ' + error.message);
  }
}

// Get status text for display
function getStatusText(status) {
  const statusNames = {
    'open': '–û—Ç–∫—Ä—ã—Ç',
    'active': '–ê–∫—Ç–∏–≤–µ–Ω',
    'sold': '–ü—Ä–æ–¥–∞–Ω',
    'expired': '–ò—Å—Ç–µ–∫',
    'closed': '–ó–∞–∫—Ä—ã—Ç'
  };
  return statusNames[status] || status;
}

// Load all listings for admin management
async function loadAllListings() {
  try {
    const response = await fetch('/api/market/listings');
    const data = await response.json();
    
    const container = document.getElementById('all-listings');
    
    if (data.success && data.listings.length > 0) {
      container.innerHTML = '';
      data.listings.forEach(listing => {
        const listingElement = document.createElement('div');
        listingElement.className = 'listing-item';
        listingElement.innerHTML = `
          <div class="listing-info">
            <h4>${listing.title}</h4>
            <p>${listing.description}</p>
            <div class="listing-meta">
              <span class="listing-price">${listing.price} NMCoin</span>
              <span class="listing-type">${listing.type === 'auction' ? '–ê—É–∫—Ü–∏–æ–Ω' : listing.type === 'permanent' ? '–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞' : '–ü—Ä—è–º–∞—è –ø—Ä–æ–¥–∞–∂–∞'}</span>
              <span class="listing-status status-${listing.status}">${getStatusText(listing.status)}</span>
              ${listing.pinned ? '<span class="listing-pinned">üìå –ó–∞–∫—Ä–µ–ø–ª–µ–Ω</span>' : ''}
              ${listing.permanent ? '<span class="listing-permanent">‚ôæÔ∏è –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π</span>' : ''}
              <span class="listing-owner">–í–ª–∞–¥–µ–ª–µ—Ü: ${listing.ownerName}</span>
            </div>
            <div class="listing-details">
              <span>–°–æ–∑–¥–∞–Ω–æ: ${new Date(listing.createdAt).toLocaleString()}</span>
              ${listing.buyerName ? `<span>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${listing.buyerName}</span>` : ''}
            </div>
          </div>
          <div class="listing-actions">
            <button class="btn ${listing.pinned ? 'warning' : 'secondary'}" onclick="togglePinListing('${listing.id}', ${!listing.pinned})">
              ${listing.pinned ? 'üìå –û—Ç–∫—Ä–µ–ø–∏—Ç—å' : 'üìå –ó–∞–∫—Ä–µ–ø–∏—Ç—å'}
            </button>
            <button class="btn danger" onclick="adminDeleteListing('${listing.id}')">
              üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ª–æ—Ç
            </button>
            ${listing.status === 'open' ? `
              <button class="btn warning" onclick="closeListing('${listing.id}')">
                üîí –ó–∞–∫—Ä—ã—Ç—å –ª–æ—Ç
              </button>
            ` : ''}
          </div>
        `;
        container.appendChild(listingElement);
      });
    } else {
      container.innerHTML = '<div class="empty-state"><span class="empty-icon">üì¶</span><p>–ù–µ—Ç –ª–æ—Ç–æ–≤</p></div>';
    }
  } catch (error) {
    console.error('Error loading listings:', error);
    document.getElementById('all-listings').innerHTML = 
      '<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ—Ç–æ–≤</div>';
  }
}

// Admin delete listing
async function adminDeleteListing(listingId) {
  if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ª–æ—Ç? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!')) {
    return;
  }
  
  try {
    const response = await fetch(`/api/admin/delete-listing/${listingId}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    const data = await response.json();
    
    if (data.success) {
      alert('–õ–æ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
      loadAllListings();
    } else {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ—Ç–∞: ' + (data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    }
  } catch (error) {
    console.error('Error deleting listing:', error);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ—Ç–∞: ' + error.message);
  }
}

// Close listing
async function closeListing(listingId) {
  if (!confirm('–ó–∞–∫—Ä—ã—Ç—å —ç—Ç–æ—Ç –ª–æ—Ç? –ü–æ–∫—É–ø–∞—Ç–µ–ª–∏ –±–æ–ª—å—à–µ –Ω–µ —Å–º–æ–≥—É—Ç –µ–≥–æ –∫—É–ø–∏—Ç—å.')) {
    return;
  }
  
  try {
    const response = await fetch(`/api/admin/close-listing/${listingId}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    const data = await response.json();
    
    if (data.success) {
      alert('–õ–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç!');
      loadAllListings();
    } else {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ª–æ—Ç–∞: ' + (data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    }
  } catch (error) {
    console.error('Error closing listing:', error);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ª–æ—Ç–∞: ' + error.message);
  }
}

// Toggle pin listing
async function togglePinListing(listingId, pinned) {
  const action = pinned ? '–∑–∞–∫—Ä–µ–ø–∏—Ç—å' : '–æ—Ç–∫—Ä–µ–ø–∏—Ç—å';
  if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ ${action} —ç—Ç–æ—Ç –ª–æ—Ç?`)) {
    return;
  }
  
  try {
    const response = await fetch(`/api/admin/pin-listing/${listingId}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ pinned: pinned })
    });
    
    const data = await response.json();
    
    if (data.success) {
      alert(data.message);
      loadAllListings();
    } else {
      alert('–û—à–∏–±–∫–∞: ' + (data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    }
  } catch (error) {
    console.error('Error toggling pin:', error);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è: ' + error.message);
  }
}

// Load collections
async function loadCollections() {
  try {
    const response = await fetch('/api/admin/collections');
    const data = await response.json();
    
    const container = document.getElementById('collections-list');
    
    if (data.success && data.collections.length > 0) {
      container.innerHTML = '';
      data.collections.forEach(collection => {
        const collectionElement = document.createElement('div');
        collectionElement.className = 'collection-item';
        collectionElement.innerHTML = `
          <div class="collection-info">
            <h4>${collection.name}</h4>
            <p>${collection.description}</p>
            <div class="collection-stats">
              <span>–ö–∞—Ä—Ç: ${collection.cards ? collection.cards.length : 0}</span>
              <span>–ù–∞–≥—Ä–∞–¥–∞: ${collection.reward} NMCoin</span>
            </div>
          </div>
          <div class="collection-actions">
            <button class="btn" onclick="editCollection('${collection.id}')">
              ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            </button>
            <button class="btn danger" onclick="deleteCollection('${collection.id}')">
              üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
            </button>
          </div>
        `;
        container.appendChild(collectionElement);
      });
    } else {
      container.innerHTML = '<div class="empty-state"><span class="empty-icon">üèÜ</span><p>–ù–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–π</p></div>';
    }
  } catch (error) {
    console.error('Error loading collections:', error);
    document.getElementById('collections-list').innerHTML = 
      '<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π</div>';
  }
}

// Auto-show tab based on URL parameter
document.addEventListener('DOMContentLoaded', function() {
  const urlParams = new URLSearchParams(window.location.search);
  const tab = urlParams.get('tab');
  if (tab) {
    showTab(tab);
  }
  
  // Load data for specific tabs
  if (tab === 'pending') {
    loadPendingTransactions();
  } else if (tab === 'collections') {
    loadCollections();
  }
  
  // Handle coin giving form
  const giveCoinsForm = document.getElementById('give-coins-form');
  if (giveCoinsForm) {
    giveCoinsForm.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const amount = document.getElementById('coin-amount').value;
      const userId = document.getElementById('user-id').value;
      
      try {
        const response = await fetch('/admin/give-coins', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ 
            amount: parseInt(amount),
            userId: userId || null
          })
        });
        
        const result = await response.json();
        
        if (result.success) {
          alert(`–ü–æ–ª—É—á–µ–Ω–æ ${amount} NMCoin! –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${result.newBalance} NMCoin`);
          location.reload();
        } else {
          alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –º–æ–Ω–µ—Ç: ' + (result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
        }
      } catch (error) {
        console.error('Error giving coins:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –º–æ–Ω–µ—Ç: ' + error.message);
      }
    });
  }
  
  // Load support tickets if on support tab
  if (tab === 'support') {
    loadSupportTickets();
  }
  
  // Load users if on users tab
  if (tab === 'users') {
    loadUsers();
  }
  
  // Handle role change form
  const changeRoleForm = document.getElementById('change-role-form');
  if (changeRoleForm) {
    changeRoleForm.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const userId = document.getElementById('role-user-id').value;
      const role = document.getElementById('user-role').value;
      
      if (!confirm(`–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–∞ ${role}?`)) {
        return;
      }
      
      try {
        const response = await fetch('/api/admin/change-role', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ 
            userId: userId,
            role: role
          })
        });
        
        const result = await response.json();
        
        if (result.success) {
          alert(`–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${role}!`);
          loadUsers(); // Refresh users list
          changeRoleForm.reset();
        } else {
          alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏: ' + (result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
        }
      } catch (error) {
        console.error('Error changing role:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏: ' + error.message);
      }
    });
  }
});

// Users management functions
async function loadUsers() {
  console.log('üîÑ Loading users...');
  const usersList = document.getElementById('users-list');
  usersList.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...</div>';
  
  try {
    const response = await fetch('/api/admin/users');
    console.log('üì° Response status:', response.status);
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const data = await response.json();
    console.log('üìä Users data:', data);
    
    if (data.success && data.users && data.users.length > 0) {
      console.log(`‚úÖ Found ${data.users.length} users`);
      usersList.innerHTML = data.users.map(user => `
        <div class="user-item">
          <div class="user-info">
            <img class="user-avatar" src="${user.avatar || '/images/default-avatar.png'}" alt="Avatar" onerror="this.src='/images/default-avatar.png'">
            <div class="user-details">
              <div class="user-name">${user.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</div>
              <div class="user-id">ID: ${user.id}</div>
              <div class="user-role role-${user.role || 'user'}">${getRoleName(user.role || 'user')}</div>
            </div>
          </div>
          <div class="user-stats">
            <div class="stat-item">
              <span class="stat-label">–ë–∞–ª–∞–Ω—Å:</span>
              <span class="stat-value">${user.balance || 0} NMCoin</span>
            </div>
            <div class="stat-item">
              <span class="stat-label">–ö–∞—Ä—Ç:</span>
              <span class="stat-value">${(user.inventory || []).length}</span>
            </div>
          </div>
          <div class="user-actions">
            <button onclick="quickChangeRole('${user.id}', '${user.role || 'user'}')" class="btn btn-small">
              –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å
            </button>
          </div>
        </div>
      `).join('');
    } else if (data.success && (!data.users || data.users.length === 0)) {
      console.log('‚ö†Ô∏è No users found');
      usersList.innerHTML = '<div class="empty-users"><p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p></div>';
    } else {
      console.log('‚ùå API returned error:', data.error);
      usersList.innerHTML = `<div class="error">–û—à–∏–±–∫–∞: ${data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}</div>`;
    }
  } catch (error) {
    console.error('‚ùå Error loading users:', error);
    usersList.innerHTML = `<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error.message}</div>`;
  }
}

function getRoleName(role) {
  const roleNames = {
    'user': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    'moderator': '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä',
    'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
  };
  return roleNames[role] || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
}

function quickChangeRole(userId, currentRole) {
  const roles = ['user', 'moderator', 'admin'];
  const roleNames = ['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'];
  
  let options = '';
  roles.forEach((role, index) => {
    const selected = role === currentRole ? 'selected' : '';
    options += `<option value="${role}" ${selected}>${roleNames[index]}</option>`;
  });
  
  const newRole = prompt(`–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:\n\n1 - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n2 - –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä\n3 - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3):`);
  
  if (newRole && newRole >= 1 && newRole <= 3) {
    const selectedRole = roles[newRole - 1];
    
    // Fill the form and submit
    document.getElementById('role-user-id').value = userId;
    document.getElementById('user-role').value = selectedRole;
    document.getElementById('change-role-form').dispatchEvent(new Event('submit'));
  }
}

// Support ticket functions
let currentTicketId = null;

async function loadSupportTickets() {
  try {
    const response = await fetch('/api/admin/support/tickets');
    const result = await response.json();
    
    const ticketsList = document.getElementById('support-tickets-list');
    
    if (result.success && result.tickets.length > 0) {
      ticketsList.innerHTML = result.tickets.map(ticket => `
        <div class="ticket-item admin-ticket ${ticket.status}">
          <div class="ticket-header">
            <span class="ticket-id">#${ticket.id}</span>
            <span class="ticket-user">üë§ ${ticket.userName}</span>
            <span class="ticket-subject">${getSubjectIcon(ticket.subject)} ${getSubjectName(ticket.subject)}</span>
            <span class="ticket-status status-${ticket.status}">${getStatusName(ticket.status)}</span>
          </div>
          <div class="ticket-message">${ticket.message}</div>
          <div class="ticket-date">–°–æ–∑–¥–∞–Ω–æ: ${new Date(ticket.createdAt).toLocaleString('ru-RU')}</div>
          ${ticket.response ? `
            <div class="ticket-response">
              <strong>–û—Ç–≤–µ—Ç:</strong> ${ticket.response}
              <div class="response-date">–û—Ç–≤–µ—á–µ–Ω–æ: ${new Date(ticket.responseAt).toLocaleString('ru-RU')}</div>
            </div>
          ` : ''}
          <div class="ticket-actions">
            <button onclick="respondToTicket('${ticket.id}')" class="btn btn-primary btn-small">
              ${ticket.response ? '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç' : 'üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å'}
            </button>
          </div>
        </div>
      `).join('');
    } else {
      ticketsList.innerHTML = '<p class="no-tickets">–û–±—Ä–∞—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç</p>';
    }
  } catch (error) {
    document.getElementById('support-tickets-list').innerHTML = '<p class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π</p>';
    console.error('Error loading support tickets:', error);
  }
}

function respondToTicket(ticketId) {
  currentTicketId = ticketId;
  
  // Find ticket data
  fetch('/api/admin/support/tickets')
    .then(response => response.json())
    .then(result => {
      if (result.success) {
        const ticket = result.tickets.find(t => t.id === ticketId);
        if (ticket) {
          document.getElementById('ticket-details').innerHTML = `
            <div class="ticket-details">
              <h4>–û–±—Ä–∞—â–µ–Ω–∏–µ #${ticket.id}</h4>
              <p><strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> ${ticket.userName}</p>
              <p><strong>–¢–µ–º–∞:</strong> ${getSubjectIcon(ticket.subject)} ${getSubjectName(ticket.subject)}</p>
              <p><strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong></p>
              <div class="original-message">${ticket.message}</div>
              <p><strong>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</strong> ${new Date(ticket.createdAt).toLocaleString('ru-RU')}</p>
            </div>
          `;
          
          // Pre-fill response if exists
          if (ticket.response) {
            document.getElementById('support-response').value = ticket.response;
            document.getElementById('support-status').value = ticket.status;
          } else {
            document.getElementById('support-response').value = '';
            document.getElementById('support-status').value = 'in_progress';
          }
          
          document.getElementById('support-modal').style.display = 'block';
        }
      }
    });
}

function closeSupportModal() {
  document.getElementById('support-modal').style.display = 'none';
  currentTicketId = null;
}

// Handle support response form
document.getElementById('support-response-form').addEventListener('submit', async function(e) {
  e.preventDefault();
  
  if (!currentTicketId) return;
  
  const response = document.getElementById('support-response').value;
  const status = document.getElementById('support-status').value;
  
  try {
    const result = await fetch('/api/admin/support/respond', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        ticketId: currentTicketId,
        response: response,
        status: status
      })
    });
    
    const data = await result.json();
    
    if (data.success) {
      alert('‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
      closeSupportModal();
      loadSupportTickets();
    } else {
      alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: ' + data.error);
    }
  } catch (error) {
    alert('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞');
    console.error('Error:', error);
  }
});

function getSubjectIcon(subject) {
  const icons = {
    'technical': 'üîß',
    'payment': 'üí∞',
    'trading': 'üõí',
    'account': 'üë§',
    'ban': '‚ö†Ô∏è',
    'bug': 'üêõ',
    'suggestion': 'üí°',
    'other': '‚ùì'
  };
  return icons[subject] || '‚ùì';
}

function getSubjectName(subject) {
  const names = {
    'technical': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞',
    'payment': '–í–æ–ø—Ä–æ—Å –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º',
    'trading': '–ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–æ—Ä–≥–æ–≤–ª–µ–π',
    'account': '–í–æ–ø—Ä–æ—Å –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É',
    'ban': '–û–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –±–∞–Ω–∞',
    'bug': '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ',
    'suggestion': '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
    'other': '–î—Ä—É–≥–æ–µ'
  };
  return names[subject] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

function getStatusName(status) {
  const names = {
    'open': '–û—Ç–∫—Ä—ã—Ç–æ',
    'in_progress': '–í —Ä–∞–±–æ—Ç–µ',
    'closed': '–ó–∞–∫—Ä—ã—Ç–æ'
  };
  return names[status] || status;
}
</script>
<script src="/js/ui-effects.js"></script>
<script src="/js/dropdown.js"></script>
<script src="/js/theme-switcher.js"></script>
</body>
</html>